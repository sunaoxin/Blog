<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>小爱课程表适配</title>
    <url>/2021/07/29/xiaoai/</url>
    <content><![CDATA[<h4 id="使用cheerio"><a href="#使用cheerio" class="headerlink" title="使用cheerio"></a>使用cheerio</h4><p>cheerio是jquery核心功能的一个快速灵活而又简洁的实现，主要是为了用在服务器端需要对DOM进行操作的地方，让你在服务器端和html愉快的玩耍</p>
<h4 id="快到没朋友"><a href="#快到没朋友" class="headerlink" title="快到没朋友"></a>快到没朋友</h4><p>cheerio使用了及其简洁而又标准的DOM模型， 因此对文档的转换，操作，渲染都极其的高效。基本的端到端测试显示它的速度至少是JSDOM的8倍</p>
<h4 id="provider函数对课程表进行解析"><a href="#provider函数对课程表进行解析" class="headerlink" title="provider函数对课程表进行解析"></a>provider函数对课程表进行解析</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scheduleHtmlProvider</span>(<span class="params">dom = <span class="built_in">document</span></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> aaa = dom.querySelector(<span class="string">&#x27;#user&#x27;</span>).outerHTML;</span><br><span class="line">	<span class="keyword">return</span> aaa;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>小爱课程表</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>cheerio</tag>
      </tags>
  </entry>
  <entry>
    <title>18 原型对象</title>
    <url>/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9518/</url>
    <content><![CDATA[<h4> 原型prototype </h4>


<ul>
<li>我们所创建的每个函数，解析器都会向函数中添加一个属性prototype，这个属性对应着一个对象，这个对象就是我们所谓的原型对象</li>
</ul>
<span id="more"></span>
<ul>
<li>如果函数作为普通函数调用prototype没有任何作用</li>
<li>当函数以构造函数的形式调用时，他所创建的对象中都会有一个隐含的属性，<ul>
<li>指向该构造函数的原型对象，我们可以通过__proto__来访问该属性</li>
</ul>
</li>
<li>原型对象就相当于一个公共的区域，所有同一个类的实例都可以访问到这个原型对象<ul>
<li>我们可以将对象中共有的内容，统一设置到原型对象中</li>
</ul>
</li>
<li>当我们访问对象的一个属性或方法时，他会现在对象自身中寻找，如果没有则直接使用</li>
<li>在创建构造函数时，可以将这些对象共有的属性和烦啊发，统一添加到构造函数的原型对象中，这样不用分别为每一个对象添加，也不会影响到全局作用域，就可以为每个对象都具有这些属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,gender</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">this</span>.name = name;</span><br><span class="line">	<span class="built_in">this</span>.age = age;</span><br><span class="line">	<span class="built_in">this</span>.gender = gender;</span><br><span class="line">	<span class="comment">//向对象中添加一个方法：</span></span><br><span class="line">	<span class="comment">//this.sayName = function()&#123;</span></span><br><span class="line">		alert(<span class="string">&quot;大家好，我是&quot;</span>+<span class="built_in">this</span>.name);</span><br><span class="line">	<span class="comment">//&#125;;</span></span><br><span class="line">	<span class="comment">//this.sayName = fun;  //提升性能</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将sayName方法在全局作用域中定义  ——————不会影响全局作用域</span></span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	alert(<span class="string">&quot;大家好，我是&quot;</span>+<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> Person(<span class="string">&quot;孙悟空&quot;</span>,<span class="number">18</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">per.sayName(); 	</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript学习之路</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>17 构造函数修改</title>
    <url>/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9517/</url>
    <content><![CDATA[<h4>创建一个Person构造函数</h4>

<ul>
<li>在Person构造函数中，为每一个对象都添加一个sayName方法</li>
<li>目前我们的方法是在构造函数内部创建的<ul>
<li>也就是构造函数每执行一次就会创建一个新的sayName方法</li>
<li>也就是所有实例的sayName都是唯一的</li>
</ul>
</li>
</ul>
<span id="more"></span>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,gender</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">this</span>.name = name;</span><br><span class="line">	<span class="built_in">this</span>.age = age;</span><br><span class="line">	<span class="built_in">this</span>.gender = gender;</span><br><span class="line">	<span class="comment">//向对象中添加一个方法：</span></span><br><span class="line">	<span class="comment">//this.sayName = function()&#123;</span></span><br><span class="line">		alert(“大家好，我是”+<span class="built_in">this</span>.name);</span><br><span class="line">	<span class="comment">//&#125;;</span></span><br><span class="line">	<span class="built_in">this</span>.sayName = fun;  <span class="comment">//提升性能</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将sayName方法在全局作用域中定义</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	alert(”大家好，我是”+<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript学习之路</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>16 构造函数</title>
    <url>/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9516/</url>
    <content><![CDATA[<ul>
<li>由于使用工厂方法创建的对象，使用的构造函数都是Object</li>
<li>无法区分出多种不同的对象所以才有下文</li>
</ul>
<span id="more"></span>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createDog</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">	obj.name = name;</span><br><span class="line">	obj.age = age;</span><br><span class="line">	obj.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		alert(”汪汪”);</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> dog = createDog(”旺财”,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>—–正篇开始</strong></p>
<ul>
<li><p>创建一个构造函数，专门用来创建Person对象<br>  构造函数就是一个普通的函数，创建方式和普通函数没有区别<br>  不同的是构造函数习惯上首字母大写</p>
</li>
<li><p>构造函数和普通函数的区别就是调用方式的不同<br>  普通函数是直接调用，而构造函数需要使用new关键字来调用</p>
</li>
</ul>
<h5>构造函数的执行流程</h5>

<ol>
<li>立刻创建一个新对象</li>
<li>将新建的对象设置为函数中this,在构造函数中可以使用this来引用新建的对象</li>
<li>逐行执行函数中的代码</li>
<li>将新建的对象作为返回值返回</li>
</ol>
<ul>
<li>使用同一个构造函数创建的对象我们成为一类对象，也将一个构造函数称为一个类</li>
<li>我们将通过一个构造函数创建的对象，称为类的实例</li>
</ul>
<h5>this的情况</h5>

<ol>
<li>当以函数形式调用时，this是window</li>
<li>当以方法形式调用时，谁调用方法this就是谁</li>
<li>当以构造函数的形式调用时，this就是新创建的那个对象</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age,gender</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">this</span>.name = name;</span><br><span class="line">	<span class="built_in">this</span>.age = age;</span><br><span class="line">	<span class="built_in">this</span>.gender = gender;</span><br><span class="line">	<span class="built_in">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		alert(<span class="built_in">this</span>.name);</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> Person(”白骨精”,<span class="number">16</span>,”女”);</span><br><span class="line"><span class="keyword">var</span> per2 = <span class="keyword">new</span> Person(”猪八戒”,<span class="number">38</span>,”男”);</span><br><span class="line"><span class="built_in">console</span>.log(per);</span><br></pre></td></tr></table></figure>

<h5>使用instanceof可以检查一个对象是否是一个类的实例</h5>

<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">对象 <span class="keyword">instanceof</span> 构造函数</span><br><span class="line"><span class="built_in">console</span>.log(per <span class="keyword">instanceof</span> Person);</span><br></pre></td></tr></table></figure>
<p>所有的对象都是object的后代，所以任何对象和Object做instanceof检查时都会返回true</p>
]]></content>
      <categories>
        <category>JavaScript学习之路</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>15 使用工厂方法创建对象</title>
    <url>/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9515/</url>
    <content><![CDATA[<h5>逐个创建对象</h5>
正常情况下是逐个创建对象，过于繁琐，才有了工厂模式创建对象（即封装函数）
<span id="more"></span>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	<span class="attr">name</span>:<span class="string">&quot;孙悟空&quot;</span>,</span><br><span class="line">	<span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">	<span class="attr">gender</span>:<span class="string">&quot;男&quot;</span>,</span><br><span class="line">	<span class="attr">sayName</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		alert(<span class="built_in">this</span>.name);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h5>工厂方法创建对象</h5>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">creatPerson</span>(<span class="params">name,age,gender</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">	obj.name = name;</span><br><span class="line">	obj.age = age;</span><br><span class="line">	obj.gender = gender;</span><br><span class="line">	obj.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		alert(<span class="built_in">this</span>.name);</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = creatPerson(<span class="string">&quot;猪八戒&quot;</span>,<span class="number">28</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> obj3 = creatPerson(<span class="string">&quot;沙和尚&quot;</span>,<span class="number">38</span>,<span class="string">&quot;男&quot;</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript学习之路</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>14 this关键字补充</title>
    <url>/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9514/</url>
    <content><![CDATA[<h5>this补充说明--></h5>

<span id="more"></span>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	<span class="attr">name</span>:”孙悟空”,</span><br><span class="line">	<span class="attr">sayName</span>:fun</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">	<span class="attr">name</span>:”沙和尚”，</span><br><span class="line">	<span class="attr">sayName</span>:fun</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> name = “全局的name属性”;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">obj.sayName();  <span class="comment">//输出”孙悟空“</span></span><br><span class="line">obj2.sayName();  <span class="comment">//输出“沙和尚” 以方法形式调用</span></span><br><span class="line">fun();  <span class="comment">//输出”全局的name属性“   以函数形式调用</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript学习之路</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>13 this关键字</title>
    <url>/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9513/</url>
    <content><![CDATA[<ul>
<li>解析器在调用函数每次都会向函数内部传递进一个隐含的参数，这个隐含的参数就是this，this指向的是一个对象<span id="more"></span></li>
<li>这个对象我们成为函数执行的上下文对象</li>
<li>根据函数的调用方式不同，this会指向不同的对象<br>  1、以函数形式调用，this永远都是window<br>  2、以方法形式调用，this就是调用方法的那个对象</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript学习之路</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>12 debug</title>
    <url>/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9512/</url>
    <content><![CDATA[<h5>F10添加监控，可以看各个值当前的参数（有点水）</h5>
<span id="more"></span>]]></content>
      <categories>
        <category>JavaScript学习之路</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>11 函数作用域</title>
    <url>/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9511/</url>
    <content><![CDATA[<h4>函数作用域</h4>

<ul>
<li>调用函数时创建的函数作用域，函数执行完毕后，函数作用域销毁</li>
<li>每调用一次函数，就会创建一个新的函数作用域，他们之间是相互独立的</li>
<li>在函数作用域中可以访问到全局作用域的变量<br>  在全局作用域中，无法访问到函数作用域的变量</li>
<li>在函数作用域中操作一个变量，会在自身作用域中寻找<br>  § 如果有就直接使用，如果没有，就在上一级作用域寻找。<br>  § 如果全局作用域中依然没有找到，则报错ReferenceError</li>
<li>在函数中要访问全局变量可以使用window对象。  例如window.a</li>
</ul>
<span id="more"></span>    
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;  <span class="comment">//创建一个变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> a = <span class="string">&quot;我是函数中的变量a&quot;</span>;</span><br><span class="line">	<span class="keyword">var</span> b = <span class="number">20</span>;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&quot;a = &quot;</span>+ a);  <span class="comment">//可以访问到外部的a</span></span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;b = &quot;</span>+ b);  <span class="comment">//访问不到b</span></span><br></pre></td></tr></table></figure>

<h5>！！函数作用域也有声明提前</h5>
    
<ul>
<li>使用var关键字声明的变量，会在函数中所有的代码执行之前被声明</li>
<li>函数声明也会在函数中所有的代码执行之前执行</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="number">33</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun5</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(”c = ”+ c);</span><br><span class="line">	<span class="keyword">var</span> c = <span class="number">10</span>;  <span class="comment">//在fun5()执行后输出undefined，因为声明提前了，但是没有赋值</span></span><br><span class="line">	c = <span class="number">10</span>;  <span class="comment">//在fun5()执行后输出33，没有声明提前，所以寻找到上一作用域的c=33</span></span><br><span class="line">	d = <span class="number">100</span>;  <span class="comment">//如果不写var，则会被认定为全局变量</span></span><br><span class="line">&#125;</span><br><span class="line">fun5();</span><br><span class="line"><span class="built_in">console</span>.log(”d = ”+ d);  <span class="comment">//执行后输出d = 100  PS：d是函数中书写的变量		</span></span><br><span class="line"><span class="keyword">var</span> e = <span class="number">23</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun6</span>(<span class="params">e</span>)</span>&#123;    <span class="comment">//定义形参就相当于在函数作用域中声明了变量</span></span><br><span class="line">	alert(e);</span><br><span class="line">&#125;</span><br><span class="line">fun6();  <span class="comment">//执行后输出undefined，</span></span><br><span class="line">		 因为声明了形参，相当于在函数中添加了<span class="keyword">var</span> e；，但并未给e赋值</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript学习之路</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>10 全局作用域</title>
    <url>/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9510/</url>
    <content><![CDATA[<h3>在JS中一共有两种作用域：</h3>
<h4>全局作用域</h4>

<ul>
<li>直接编写在script标签中的JS 代码，都在全局作用域</li>
<li>全局作用域在页面打开时创建，在页面关闭时销毁</li>
<li>在全局作用域中有一个全局对象window，<ul>
<li>他代表的时一个浏览器窗口，我们可以直接使用</li>
</ul>
</li>
<li>在全局作用域中：<ul>
<li>创建的变量都会作为window对象的属性保存</li>
<li>创建的函数也会作为window对象的属性保存</li>
</ul>
</li>
<li>全局作用域中的变量都是全局变量，在页面的任意部分都可以被访问到</li>
</ul>
<span id="more"></span>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	alert(<span class="string">&quot;fun函数执行了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a);</span><br><span class="line"><span class="built_in">window</span>.fun();</span><br></pre></td></tr></table></figure>
<h5>！！！变量的声明提前</h5>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;  <span class="comment">//相当于 </span></span><br><span class="line">a = <span class="number">123</span>;   <span class="comment">//也相当于 </span></span><br><span class="line"><span class="built_in">window</span>.a = <span class="number">123</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>变量的声明提前使用var关键字声明的变量，会在所有代码执行之前被声明，（但是不会被赋值）。<br>  例：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;a = &quot;</span>+ a );</span><br><span class="line">   <span class="keyword">var</span> = <span class="number">123</span>;    <span class="comment">//var在调用中后声明，是可以执行，但是提示变量未定义</span></span><br></pre></td></tr></table></figure></li>
<li>不使用var关键字的话，则变量不会被声明提前</li>
</ul>
<h5>！！！函数的声明提前</h5>

<ul>
<li>使用函数声明形式创建的函数function 函数(){}<br>  1.它会在所有的代码执行之前就会被创建，所以我们可以在函数声明前来调用函数<br>  2.使用函数表达式创建的函数，不会被声明提前，所以不能在声明前调用<ul>
<li>会声明提前，而且可以在声明前调用：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(”我是一个fun函数”);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>不会声明提前，不能在声明前调用：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fun2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(”我是一个fun2函数”);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript学习之路</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>09 JS基础_方法</title>
    <url>/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9509/</url>
    <content><![CDATA[<h5>对象的属性值可以是任何的数据类型，也可以是函数</h5>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj.name = “孙悟空”;</span><br><span class="line">obj.age = <span class="number">18</span>;</span><br><span class="line">obj.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(obj.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(obj.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>//调用方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">obj.sayName();</span><br></pre></td></tr></table></figure>

<p>//调用函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fun();</span><br></pre></td></tr></table></figure>
<ul>
<li>函数也可以成为对象的属性，如果一个函数作为一个对象的属性保存，那么我们称这个函数是这个对象的方法。</li>
<li>调用这个函数就是调用对象的方法(method);</li>
<li>但是它只是名称上的区别，没有其他区别。</li>
</ul>
<h5>枚举对象中的属性，使用for…in语句</h5>
    
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">语法，<span class="keyword">for</span>(<span class="keyword">var</span> 变量 <span class="keyword">in</span> 对象)&#123;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> n <span class="keyword">in</span> obj)&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(”属性名“+ n);</span><br><span class="line">	<span class="built_in">console</span>.log(“属性值”+ obj[n]);  <span class="comment">//此时根据n的值选取那个obj，输出属性值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>for …in 语句对象有几个属性，循环体就执行几次；</li>
<li>每次执行，会将对象中的一个属性的名字赋值给变量；</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript学习之路</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>08 立即执行函数</title>
    <url>/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9508/</url>
    <content><![CDATA[<h5>立即执行函数：</h5>

<p><code>函数对象()</code></p>
<span id="more"></span>
<p>函数定义完，立即被调用，往往只会执行一次</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	alert(<span class="string">&quot;我是一个匿名函数～～&quot;</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&quot;b = &quot;</span> + b);</span><br><span class="line">&#125;)(<span class="number">123</span>,<span class="number">456</span>);  <span class="comment">//结果为：a = 123</span></span><br><span class="line">			 		  b = <span class="number">456</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript学习之路</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>07 返回值的类型</title>
    <url>/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9507/</url>
    <content><![CDATA[<h5>使用break可以推出当前的循环</h5>

<ul>
<li>使用continue可以跳出当次循环</li>
<li>使用return可以结束整个函数</li>
<li>返回值可以时任意的数据类型，也可以是一个对象，也可以是一个函数<br>  <strong>注意：return fun3; 是返回一个函数</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> fun3();是返回一个函数的执行结果</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h5>在函数内部也可以再声明一个函数</h5>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun3</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">fun4</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		alert(”我是fun4”);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> fun4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a = fun3();  <span class="comment">//此时，a的值就是fun4函数</span></span><br><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">//输出fun4函数</span></span><br><span class="line"></span><br><span class="line">a();  <span class="comment">//相当于调用了fun4函数</span></span><br><span class="line">fun3()();  <span class="comment">//执行了fun4函数</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript学习之路</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>06 实参可以是任何值</title>
    <url>/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9506/</url>
    <content><![CDATA[<h5>实参可以是一个对象，也可以是一个函数</h5>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mianji</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">3.14</span>*r*r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span> (<span class="params">o</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(”我是”+o.name+“，今年我”+o.age+“岁，我住在”+o.address);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//sayHello（“猪八戒”，28，“高老庄”）；</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	<span class="attr">name</span>:<span class="string">&quot;孙悟空&quot;</span>,</span><br><span class="line">	<span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">	<span class="attr">address</span>:<span class="string">&quot;花果山&quot;</span></span><br><span class="line">&#125;	</span><br><span class="line">sayHello(obj);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&quot;a = &quot;</span>+a);</span><br><span class="line">	a(obj);  <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line">fun(sayHello);  <span class="comment">//输出函数</span></span><br><span class="line">fun(sayHello(obj));  <span class="comment">//套娃，输出sayHello（obj）的执行结果</span></span><br></pre></td></tr></table></figure>
<h5>函数是一个具有功能的对象:</h5>

<ul>
<li>mianji（）<ul>
<li>相当于使用的函数的返回值</li>
<li>调用函数</li>
</ul>
</li>
<li>mianji<ul>
<li>函数对象</li>
<li>相当于使用函数对象</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript学习之路</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>05 函数的返回值</title>
    <url>/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9505/</url>
    <content><![CDATA[<h5>函数返回值</h5>

<ul>
<li>在函数中书写returnn语句，return后的值将会作为函数的执行结果返回</li>
<li>可以定义一个变量来接受结果</li>
<li>在函数中，return后的语句都不会执行</li>
<li>如果return语句后不跟任何值相当于返回undefined</li>
<li>return后可以跟任意数据类型</li>
</ul>
<span id="more"></span>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> result = alert(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript学习之路</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>04 函数的参数</title>
    <url>/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9504/</url>
    <content><![CDATA[<h5>函数参数</h5>

<p>定义一个用来求两个数和的函数，可以在函数的（）中指定一个或多个形参</p>
<span id="more"></span>
<p><strong>多个形参之间用，隔开</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(a+b);		</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>形参并不赋值</li>
<li>在调用函数时，在()中指定实参</li>
<li>实参将会赋值给函数中对应的形参</li>
<li>调用函数时解析器不会检查实参的类型，函数的实参可以时任意数据类型<ul>
<li>多余实参不会被赋值</li>
</ul>
</li>
<li>调用实参的数量少于形参的数量，则没有对应实参的形参将时undefined</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript学习之路</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>03 函数简介</title>
    <url>/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9503/</url>
    <content><![CDATA[<ul>
<li>对象也是一个对象</li>
<li>函数可以封装一些功能（代码），在需要时可以执行这些功能（代码）</li>
</ul>
<span id="more"></span>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(fun);</span><br><span class="line">	<span class="built_in">console</span>.log(fun);</span><br><span class="line">	<span class="built_in">console</span>.log(fun);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>函数中可以保存一些diamanté在需要的时候调用</li>
<li>使用typeof检查函数对象时，会返回function</li>
<li>函数中封装的代码回按照函数顺序执行</li>
</ul>
<h5>构造函数，将封装的代码以字符串的形式传递给构造函数</h5>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="built_in">Function</span>(”<span class="built_in">console</span>.log(’Hello 这是我的第一个函数’);”);</span><br><span class="line">fun();   <span class="comment">// 调用</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS：基本不会使用</span><br></pre></td></tr></table></figure>
<h5>使用函数声明来一个对象</h5>
    
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(”fun”);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h5>使用函数表达式来创建一个函数（将一个匿名函数赋值给变量）</h5>
    
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fun3 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(”我是你命函数中封装的代码”)；</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript学习之路</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>02 对象字面量</title>
    <url>/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9502/</url>
    <content><![CDATA[<h5>使用对象字面量来创建一个对象：</h5>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">等同于<span class="keyword">var</span> obj = <span class="keyword">new</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>
<h5>在创建对象时，可以直接指定对象中的属性</h5> 
 
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">语法：&#123;属性名：属性值，属性名：属性值，，，&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	<span class="attr">name</span>:“猪八戒”,</span><br><span class="line">	<span class="attr">age</span>:”<span class="number">28</span>”,</span><br><span class="line">	<span class="attr">gender</span>:”男”</span><br><span class="line">	<span class="attr">test</span>:”&#123;<span class="attr">name</span>:”zhubajie”&#125;”</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript学习之路</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>01 基本数据类型和引用数据类型</title>
    <url>/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9501/</url>
    <content><![CDATA[<ul>
<li>当比较两个基本数据类型时，就是比值  </li>
<li>当比较两个引用数据类型时，就是比较对象的内存地址  </li>
<li>如果两个对象时一模一样的，但是地址不同，也会返回false  </li>
</ul>
<span id="more"></span>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj3 == obj4);</span><br></pre></td></tr></table></figure>


<p>PS：对象是储存在堆内存中，基本数据类型储存在栈内存中</p>
]]></content>
      <categories>
        <category>JavaScript学习之路</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
