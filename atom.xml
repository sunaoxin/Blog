<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OnlyWait&#39;s Blog</title>
  
  
  <link href="https://qaaa.top/atom.xml" rel="self"/>
  
  <link href="https://qaaa.top/"/>
  <updated>2021-08-06T05:28:12.788Z</updated>
  <id>https://qaaa.top/</id>
  
  <author>
    <name>Sun Aoxin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>18 原型对象</title>
    <link href="https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9518/"/>
    <id>https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9518/</id>
    <published>2021-08-05T15:08:53.477Z</published>
    <updated>2021-08-06T05:28:12.788Z</updated>
    
    <content type="html"><![CDATA[<h4> 原型prototype </h4><ul><li>我们所创建的每个函数，解析器都会向函数中添加一个属性prototype，这个属性对应着一个对象，这个对象就是我们所谓的原型对象</li></ul><span id="more"></span><ul><li>如果函数作为普通函数调用prototype没有任何作用</li><li>当函数以构造函数的形式调用时，他所创建的对象中都会有一个隐含的属性，<ul><li>指向该构造函数的原型对象，我们可以通过__proto__来访问该属性</li></ul></li><li>原型对象就相当于一个公共的区域，所有同一个类的实例都可以访问到这个原型对象<ul><li>我们可以将对象中共有的内容，统一设置到原型对象中</li></ul></li><li>当我们访问对象的一个属性或方法时，他会现在对象自身中寻找，如果没有则直接使用</li><li>在创建构造函数时，可以将这些对象共有的属性和烦啊发，统一添加到构造函数的原型对象中，这样不用分别为每一个对象添加，也不会影响到全局作用域，就可以为每个对象都具有这些属性</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function Person(name,age,gender)&#123;</span><br><span class="line">this.name = name;</span><br><span class="line">this.age = age;</span><br><span class="line">this.gender = gender;</span><br><span class="line">//向对象中添加一个方法：</span><br><span class="line">//this.sayName = function()&#123;</span><br><span class="line">alert(&quot;大家好，我是&quot;+this.name);</span><br><span class="line">//&#125;;</span><br><span class="line">//this.sayName = fun;  //提升性能</span><br><span class="line">&#125;</span><br><span class="line">//将sayName方法在全局作用域中定义  ——————不会影响全局作用域</span><br><span class="line">Person.prototype.sayName = function()&#123;</span><br><span class="line">alert(&quot;大家好，我是&quot;+this.name);</span><br><span class="line">&#125;</span><br><span class="line">var per = new Person(&quot;孙悟空&quot;,18,&quot;男&quot;);</span><br><span class="line">per.sayName(); </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h4&gt; 原型prototype &lt;/h4&gt;


&lt;ul&gt;
&lt;li&gt;我们所创建的每个函数，解析器都会向函数中添加一个属性prototype，这个属性对应着一个对象，这个对象就是我们所谓的原型对象&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="JavaScript学习之路" scheme="https://qaaa.top/categories/JavaScript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="JavaScript" scheme="https://qaaa.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>17 构造函数修改</title>
    <link href="https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9517/"/>
    <id>https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9517/</id>
    <published>2021-08-05T15:07:00.111Z</published>
    <updated>2021-08-06T03:14:06.428Z</updated>
    
    <content type="html"><![CDATA[<h4>创建一个Person构造函数</h4><ul><li>在Person构造函数中，为每一个对象都添加一个sayName方法</li><li>目前我们的方法是在构造函数内部创建的<ul><li>也就是构造函数每执行一次就会创建一个新的sayName方法</li><li>也就是所有实例的sayName都是唯一的</li></ul></li></ul><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function Person(name,age,gender)&#123;</span><br><span class="line">this.name = name;</span><br><span class="line">this.age = age;</span><br><span class="line">this.gender = gender;</span><br><span class="line">//向对象中添加一个方法：</span><br><span class="line">//this.sayName = function()&#123;</span><br><span class="line">alert(“大家好，我是”+this.name);</span><br><span class="line">//&#125;;</span><br><span class="line">this.sayName = fun;  //提升性能</span><br><span class="line">&#125;</span><br><span class="line">//将sayName方法在全局作用域中定义</span><br><span class="line">function fun()&#123;</span><br><span class="line">alert(”大家好，我是”+this.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h4&gt;创建一个Person构造函数&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;在Person构造函数中，为每一个对象都添加一个sayName方法&lt;/li&gt;
&lt;li&gt;目前我们的方法是在构造函数内部创建的&lt;ul&gt;
&lt;li&gt;也就是构造函数每执行一次就会创建一个新的sayName方法&lt;/li&gt;
&lt;li&gt;也就是所有实例的sayName都是唯一的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="JavaScript学习之路" scheme="https://qaaa.top/categories/JavaScript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="JavaScript" scheme="https://qaaa.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>16 构造函数</title>
    <link href="https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9516/"/>
    <id>https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9516/</id>
    <published>2021-08-05T14:57:38.969Z</published>
    <updated>2021-08-06T03:44:01.243Z</updated>
    
    <content type="html"><![CDATA[<ul><li>由于使用工厂方法创建的对象，使用的构造函数都是Object</li><li>无法区分出多种不同的对象所以才有下文</li></ul><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function createDog(name,age)&#123;</span><br><span class="line">var obj = new Object();</span><br><span class="line">obj.name = name;</span><br><span class="line">obj.age = age;</span><br><span class="line">obj.sayHello = function()&#123;</span><br><span class="line">alert(”汪汪”);</span><br><span class="line">&#125;;</span><br><span class="line">return obj;</span><br><span class="line">&#125;</span><br><span class="line">var dog = createDog(”旺财”,3);</span><br></pre></td></tr></table></figure><hr><p><strong>—–正篇开始</strong></p><ul><li><p>创建一个构造函数，专门用来创建Person对象<br>  构造函数就是一个普通的函数，创建方式和普通函数没有区别<br>  不同的是构造函数习惯上首字母大写</p></li><li><p>构造函数和普通函数的区别就是调用方式的不同<br>  普通函数是直接调用，而构造函数需要使用new关键字来调用</p></li></ul><h5>构造函数的执行流程</h5><ol><li>立刻创建一个新对象</li><li>将新建的对象设置为函数中this,在构造函数中可以使用this来引用新建的对象</li><li>逐行执行函数中的代码</li><li>将新建的对象作为返回值返回</li></ol><ul><li>使用同一个构造函数创建的对象我们成为一类对象，也将一个构造函数称为一个类</li><li>我们将通过一个构造函数创建的对象，称为类的实例</li></ul><h5>this的情况</h5><ol><li>当以函数形式调用时，this是window</li><li>当以方法形式调用时，谁调用方法this就是谁</li><li>当以构造函数的形式调用时，this就是新创建的那个对象</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function Person(name,age,gender)&#123;</span><br><span class="line">this.name = name;</span><br><span class="line">this.age = age;</span><br><span class="line">this.gender = gender;</span><br><span class="line">this.sayName = function()&#123;</span><br><span class="line">alert(this.name);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">var per = new Person(”白骨精”,16,”女”);</span><br><span class="line">var per2 = new Person(”猪八戒”,38,”男”);</span><br><span class="line">console.log(per);</span><br></pre></td></tr></table></figure><h5>使用instanceof可以检查一个对象是否是一个类的实例</h5><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对象 instanceof 构造函数</span><br><span class="line">console.log(per instanceof Person);</span><br></pre></td></tr></table></figure><p>所有的对象都是object的后代，所以任何对象和Object做instanceof检查时都会返回true</p>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;由于使用工厂方法创建的对象，使用的构造函数都是Object&lt;/li&gt;
&lt;li&gt;无法区分出多种不同的对象所以才有下文&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="JavaScript学习之路" scheme="https://qaaa.top/categories/JavaScript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="JavaScript" scheme="https://qaaa.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>15 使用工厂方法创建对象</title>
    <link href="https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9515/"/>
    <id>https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9515/</id>
    <published>2021-08-05T14:55:48.436Z</published>
    <updated>2021-08-06T03:42:25.847Z</updated>
    
    <content type="html"><![CDATA[<h5>逐个创建对象</h5>正常情况下是逐个创建对象，过于繁琐，才有了工厂模式创建对象（即封装函数）<span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">name:&quot;孙悟空&quot;,</span><br><span class="line">age:18,</span><br><span class="line">gender:&quot;男&quot;,</span><br><span class="line">sayName:function()&#123;</span><br><span class="line">alert(this.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5>工厂方法创建对象</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function creatPerson(name,age,gender)&#123;</span><br><span class="line">var obj = new Object();</span><br><span class="line">obj.name = name;</span><br><span class="line">obj.age = age;</span><br><span class="line">obj.gender = gender;</span><br><span class="line">obj.sayName = function()&#123;</span><br><span class="line">alert(this.name);</span><br><span class="line">&#125;;</span><br><span class="line">return obj;</span><br><span class="line">&#125;</span><br><span class="line">var obj2 = creatPerson(&quot;猪八戒&quot;,28,&quot;男&quot;);</span><br><span class="line">var obj3 = creatPerson(&quot;沙和尚&quot;,38,&quot;男&quot;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h5&gt;逐个创建对象&lt;/h5&gt;
正常情况下是逐个创建对象，过于繁琐，才有了工厂模式创建对象（即封装函数）</summary>
    
    
    
    <category term="JavaScript学习之路" scheme="https://qaaa.top/categories/JavaScript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="JavaScript" scheme="https://qaaa.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>14 this关键字补充</title>
    <link href="https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9514/"/>
    <id>https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9514/</id>
    <published>2021-08-05T14:54:45.405Z</published>
    <updated>2021-08-06T03:16:02.628Z</updated>
    
    <content type="html"><![CDATA[<h5>this补充说明--></h5><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function fun()&#123;</span><br><span class="line">console.log(this.name);</span><br><span class="line">&#125;</span><br><span class="line">var obj = &#123;</span><br><span class="line">name:”孙悟空”,</span><br><span class="line">sayName:fun</span><br><span class="line">&#125;;</span><br><span class="line">var obj2 = &#123;</span><br><span class="line">name:”沙和尚”，</span><br><span class="line">sayName:fun</span><br><span class="line">&#125;;</span><br><span class="line">var name = “全局的name属性”;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj.sayName();  //输出”孙悟空“</span><br><span class="line">obj2.sayName();  //输出“沙和尚” 以方法形式调用</span><br><span class="line">fun();  //输出”全局的name属性“   以函数形式调用</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h5&gt;this补充说明--&gt;&lt;/h5&gt;</summary>
    
    
    
    <category term="JavaScript学习之路" scheme="https://qaaa.top/categories/JavaScript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="JavaScript" scheme="https://qaaa.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>13 this关键字</title>
    <link href="https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9513/"/>
    <id>https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9513/</id>
    <published>2021-08-05T14:53:36.384Z</published>
    <updated>2021-08-06T03:15:32.539Z</updated>
    
    <content type="html"><![CDATA[<ul><li>解析器在调用函数每次都会向函数内部传递进一个隐含的参数，这个隐含的参数就是this，this指向的是一个对象<span id="more"></span></li><li>这个对象我们成为函数执行的上下文对象</li><li>根据函数的调用方式不同，this会指向不同的对象<br>  1、以函数形式调用，this永远都是window<br>  2、以方法形式调用，this就是调用方法的那个对象</li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;解析器在调用函数每次都会向函数内部传递进一个隐含的参数，这个隐含的参数就是this，this指向的是一个对象</summary>
    
    
    
    <category term="JavaScript学习之路" scheme="https://qaaa.top/categories/JavaScript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="JavaScript" scheme="https://qaaa.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>12 debug</title>
    <link href="https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9512/"/>
    <id>https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9512/</id>
    <published>2021-08-05T14:52:23.460Z</published>
    <updated>2021-08-06T03:16:58.463Z</updated>
    
    <content type="html"><![CDATA[<h5>F10添加监控，可以看各个值当前的参数（有点水）</h5><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;h5&gt;F10添加监控，可以看各个值当前的参数（有点水）&lt;/h5&gt;</summary>
    
    
    
    <category term="JavaScript学习之路" scheme="https://qaaa.top/categories/JavaScript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="JavaScript" scheme="https://qaaa.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>11 函数作用域</title>
    <link href="https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9511/"/>
    <id>https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9511/</id>
    <published>2021-08-05T14:47:18.058Z</published>
    <updated>2021-08-06T03:40:35.833Z</updated>
    
    <content type="html"><![CDATA[<h4>函数作用域</h4><ul><li>调用函数时创建的函数作用域，函数执行完毕后，函数作用域销毁</li><li>每调用一次函数，就会创建一个新的函数作用域，他们之间是相互独立的</li><li>在函数作用域中可以访问到全局作用域的变量<br>  在全局作用域中，无法访问到函数作用域的变量</li><li>在函数作用域中操作一个变量，会在自身作用域中寻找<br>  § 如果有就直接使用，如果没有，就在上一级作用域寻找。<br>  § 如果全局作用域中依然没有找到，则报错ReferenceError</li><li>在函数中要访问全局变量可以使用window对象。  例如window.a</li></ul><span id="more"></span>    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var a = 10;  //创建一个变量</span><br><span class="line">function fun()&#123;</span><br><span class="line">var a = &quot;我是函数中的变量a&quot;;</span><br><span class="line">var b = 20;</span><br><span class="line">console.log(&quot;a = &quot;+ a);  //可以访问到外部的a</span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br><span class="line">console.log(&quot;b = &quot;+ b);  //访问不到b</span><br></pre></td></tr></table></figure><h5>！！函数作用域也有声明提前</h5>    <ul><li>使用var关键字声明的变量，会在函数中所有的代码执行之前被声明</li><li>函数声明也会在函数中所有的代码执行之前执行</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var c = 33;</span><br><span class="line">function fun5()&#123;</span><br><span class="line">console.log(”c = ”+ c);</span><br><span class="line">var c = 10;  //在fun5()执行后输出undefined，因为声明提前了，但是没有赋值</span><br><span class="line">c = 10;  //在fun5()执行后输出33，没有声明提前，所以寻找到上一作用域的c=33</span><br><span class="line">d = 100;  //如果不写var，则会被认定为全局变量</span><br><span class="line">&#125;</span><br><span class="line">fun5();</span><br><span class="line">console.log(”d = ”+ d);  //执行后输出d = 100  PS：d是函数中书写的变量</span><br><span class="line">var e = 23;</span><br><span class="line">function fun6(e)&#123;    //定义形参就相当于在函数作用域中声明了变量</span><br><span class="line">alert(e);</span><br><span class="line">&#125;</span><br><span class="line">fun6();  //执行后输出undefined，</span><br><span class="line"> 因为声明了形参，相当于在函数中添加了var e；，但并未给e赋值</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h4&gt;函数作用域&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;调用函数时创建的函数作用域，函数执行完毕后，函数作用域销毁&lt;/li&gt;
&lt;li&gt;每调用一次函数，就会创建一个新的函数作用域，他们之间是相互独立的&lt;/li&gt;
&lt;li&gt;在函数作用域中可以访问到全局作用域的变量&lt;br&gt;  在全局作用域中，无法访问到函数作用域的变量&lt;/li&gt;
&lt;li&gt;在函数作用域中操作一个变量，会在自身作用域中寻找&lt;br&gt;  § 如果有就直接使用，如果没有，就在上一级作用域寻找。&lt;br&gt;  § 如果全局作用域中依然没有找到，则报错ReferenceError&lt;/li&gt;
&lt;li&gt;在函数中要访问全局变量可以使用window对象。  例如window.a&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="JavaScript学习之路" scheme="https://qaaa.top/categories/JavaScript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="JavaScript" scheme="https://qaaa.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>10 全局作用域</title>
    <link href="https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9510/"/>
    <id>https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9510/</id>
    <published>2021-08-05T14:39:17.027Z</published>
    <updated>2021-08-06T03:40:19.756Z</updated>
    
    <content type="html"><![CDATA[<h3>在JS中一共有两种作用域：</h3><h4>全局作用域</h4><ul><li>直接编写在script标签中的JS 代码，都在全局作用域</li><li>全局作用域在页面打开时创建，在页面关闭时销毁</li><li>在全局作用域中有一个全局对象window，<ul><li>他代表的时一个浏览器窗口，我们可以直接使用</li></ul></li><li>在全局作用域中：<ul><li>创建的变量都会作为window对象的属性保存</li><li>创建的函数也会作为window对象的属性保存</li></ul></li><li>全局作用域中的变量都是全局变量，在页面的任意部分都可以被访问到</li></ul><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var a = 10;</span><br><span class="line">function fun()&#123;</span><br><span class="line">alert(&quot;fun函数执行了&quot;);</span><br><span class="line">&#125;</span><br><span class="line">console.log(window.a);</span><br><span class="line">window.fun();</span><br></pre></td></tr></table></figure><h5>！！！变量的声明提前</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = 123;  //相当于 </span><br><span class="line">a = 123;   //也相当于 </span><br><span class="line">window.a = 123;</span><br></pre></td></tr></table></figure><ul><li>变量的声明提前使用var关键字声明的变量，会在所有代码执行之前被声明，（但是不会被赋值）。<br>  例：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(&quot;a = &quot;+ a );</span><br><span class="line">   var = 123;    //var在调用中后声明，是可以执行，但是提示变量未定义</span><br></pre></td></tr></table></figure></li><li>不使用var关键字的话，则变量不会被声明提前</li></ul><h5>！！！函数的声明提前</h5><ul><li>使用函数声明形式创建的函数function 函数(){}<br>  1.它会在所有的代码执行之前就会被创建，所以我们可以在函数声明前来调用函数<br>  2.使用函数表达式创建的函数，不会被声明提前，所以不能在声明前调用<ul><li>会声明提前，而且可以在声明前调用：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function fun()&#123;</span><br><span class="line">console.log(”我是一个fun函数”);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>不会声明提前，不能在声明前调用：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var fun2 = function()&#123;</span><br><span class="line">console.log(”我是一个fun2函数”);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3&gt;在JS中一共有两种作用域：&lt;/h3&gt;
&lt;h4&gt;全局作用域&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;直接编写在script标签中的JS 代码，都在全局作用域&lt;/li&gt;
&lt;li&gt;全局作用域在页面打开时创建，在页面关闭时销毁&lt;/li&gt;
&lt;li&gt;在全局作用域中有一个全局对象window，&lt;ul&gt;
&lt;li&gt;他代表的时一个浏览器窗口，我们可以直接使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在全局作用域中：&lt;ul&gt;
&lt;li&gt;创建的变量都会作为window对象的属性保存&lt;/li&gt;
&lt;li&gt;创建的函数也会作为window对象的属性保存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;全局作用域中的变量都是全局变量，在页面的任意部分都可以被访问到&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="JavaScript学习之路" scheme="https://qaaa.top/categories/JavaScript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="JavaScript" scheme="https://qaaa.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>09 JS基础_方法</title>
    <link href="https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9509/"/>
    <id>https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9509/</id>
    <published>2021-08-05T14:32:19.896Z</published>
    <updated>2021-08-06T03:39:39.958Z</updated>
    
    <content type="html"><![CDATA[<h5>对象的属性值可以是任何的数据类型，也可以是函数</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var obj = new Object();</span><br><span class="line">obj.name = “孙悟空”;</span><br><span class="line">obj.age = 18;</span><br><span class="line">obj.sayName = function()&#123;</span><br><span class="line">console.log(obj.name);</span><br><span class="line">&#125;</span><br><span class="line">function fun()&#123;</span><br><span class="line">console.log(obj.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>//调用方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.sayName();</span><br></pre></td></tr></table></figure><p>//调用函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun();</span><br></pre></td></tr></table></figure><ul><li>函数也可以成为对象的属性，如果一个函数作为一个对象的属性保存，那么我们称这个函数是这个对象的方法。</li><li>调用这个函数就是调用对象的方法(method);</li><li>但是它只是名称上的区别，没有其他区别。</li></ul><h5>枚举对象中的属性，使用for…in语句</h5>    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法，for(var 变量 in 对象)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for(var n in obj)&#123;</span><br><span class="line">console.log(”属性名“+ n);</span><br><span class="line">console.log(“属性值”+ obj[n]);  //此时根据n的值选取那个obj，输出属性值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>for …in 语句对象有几个属性，循环体就执行几次；</li><li>每次执行，会将对象中的一个属性的名字赋值给变量；</li></ul>]]></content>
    
    
    <summary type="html">&lt;h5&gt;对象的属性值可以是任何的数据类型，也可以是函数&lt;/h5&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var obj = new Object();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.name = “孙悟空”;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.age = 18;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj.sayName = function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	console.log(obj.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function fun()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	console.log(obj.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="JavaScript学习之路" scheme="https://qaaa.top/categories/JavaScript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="JavaScript" scheme="https://qaaa.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>08 立即执行函数</title>
    <link href="https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9508/"/>
    <id>https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9508/</id>
    <published>2021-08-05T14:27:54.294Z</published>
    <updated>2021-08-06T03:26:35.035Z</updated>
    
    <content type="html"><![CDATA[<h5>立即执行函数：</h5><p><code>函数对象()</code></p><span id="more"></span><p>函数定义完，立即被调用，往往只会执行一次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(function()&#123;</span><br><span class="line">alert(&quot;我是一个匿名函数～～&quot;);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">(function(a,b)&#123;</span><br><span class="line">console.log(&quot;a = &quot; + a);</span><br><span class="line">console.log(&quot;b = &quot; + b);</span><br><span class="line">&#125;)(123,456);  //结果为：a = 123</span><br><span class="line">   b = 456</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h5&gt;立即执行函数：&lt;/h5&gt;

&lt;p&gt;&lt;code&gt;函数对象()&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript学习之路" scheme="https://qaaa.top/categories/JavaScript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="JavaScript" scheme="https://qaaa.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>07 返回值的类型</title>
    <link href="https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9507/"/>
    <id>https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9507/</id>
    <published>2021-08-05T14:25:12.476Z</published>
    <updated>2021-08-06T03:28:26.385Z</updated>
    
    <content type="html"><![CDATA[<h5>使用break可以推出当前的循环</h5><ul><li>使用continue可以跳出当次循环</li><li>使用return可以结束整个函数</li><li>返回值可以时任意的数据类型，也可以是一个对象，也可以是一个函数<br>  <strong>注意：return fun3; 是返回一个函数</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return fun3();是返回一个函数的执行结果</span><br></pre></td></tr></table></figure><span id="more"></span><h5>在函数内部也可以再声明一个函数</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function fun3()&#123;</span><br><span class="line">function fun4()&#123;</span><br><span class="line">alert(”我是fun4”);</span><br><span class="line">&#125;</span><br><span class="line">return fun4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a = fun3();  //此时，a的值就是fun4函数</span><br><span class="line">console.log(a);  //输出fun4函数</span><br><span class="line"></span><br><span class="line">a();  //相当于调用了fun4函数</span><br><span class="line">fun3()();  //执行了fun4函数</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h5&gt;使用break可以推出当前的循环&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;使用continue可以跳出当次循环&lt;/li&gt;
&lt;li&gt;使用return可以结束整个函数&lt;/li&gt;
&lt;li&gt;返回值可以时任意的数据类型，也可以是一个对象，也可以是一个函数&lt;br&gt;  &lt;strong&gt;注意：return fun3; 是返回一个函数&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;return fun3();是返回一个函数的执行结果&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="JavaScript学习之路" scheme="https://qaaa.top/categories/JavaScript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="JavaScript" scheme="https://qaaa.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>06 实参可以是任何值</title>
    <link href="https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9506/"/>
    <id>https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9506/</id>
    <published>2021-08-05T14:19:09.070Z</published>
    <updated>2021-08-06T03:29:54.662Z</updated>
    
    <content type="html"><![CDATA[<h5>实参可以是一个对象，也可以是一个函数</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function mianji()&#123;</span><br><span class="line">return 3.14*r*r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function sayHello (o)&#123;</span><br><span class="line">console.log(”我是”+o.name+“，今年我”+o.age+“岁，我住在”+o.address);</span><br><span class="line">&#125;</span><br><span class="line">//sayHello（“猪八戒”，28，“高老庄”）；</span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//创建一个对象</span><br><span class="line">var obj = &#123;</span><br><span class="line">name:&quot;孙悟空&quot;,</span><br><span class="line">age:18,</span><br><span class="line">address:&quot;花果山&quot;</span><br><span class="line">&#125;</span><br><span class="line">sayHello(obj);</span><br><span class="line"></span><br><span class="line">function fun(a)&#123;</span><br><span class="line">console.log(&quot;a = &quot;+a);</span><br><span class="line">a(obj);  //</span><br><span class="line">&#125;</span><br><span class="line">fun(sayHello);  //输出函数</span><br><span class="line">fun(sayHello(obj));  //套娃，输出sayHello（obj）的执行结果</span><br></pre></td></tr></table></figure><h5>函数是一个具有功能的对象:</h5><ul><li>mianji（）<ul><li>相当于使用的函数的返回值</li><li>调用函数</li></ul></li><li>mianji<ul><li>函数对象</li><li>相当于使用函数对象</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h5&gt;实参可以是一个对象，也可以是一个函数&lt;/h5&gt;

&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function mianji()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return 3.14*r*r;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function sayHello (o)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	console.log(”我是”+o.name+“，今年我”+o.age+“岁，我住在”+o.address);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//sayHello（“猪八戒”，28，“高老庄”）；&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="JavaScript学习之路" scheme="https://qaaa.top/categories/JavaScript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="JavaScript" scheme="https://qaaa.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>05 函数的返回值</title>
    <link href="https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9505/"/>
    <id>https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9505/</id>
    <published>2021-08-05T14:16:24.613Z</published>
    <updated>2021-08-06T03:30:20.084Z</updated>
    
    <content type="html"><![CDATA[<h5>函数返回值</h5><ul><li>在函数中书写returnn语句，return后的值将会作为函数的执行结果返回</li><li>可以定义一个变量来接受结果</li><li>在函数中，return后的语句都不会执行</li><li>如果return语句后不跟任何值相当于返回undefined</li><li>return后可以跟任意数据类型</li></ul><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">return &quot;hello&quot;;</span><br><span class="line">var result = alert(&quot;hello&quot;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h5&gt;函数返回值&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;在函数中书写returnn语句，return后的值将会作为函数的执行结果返回&lt;/li&gt;
&lt;li&gt;可以定义一个变量来接受结果&lt;/li&gt;
&lt;li&gt;在函数中，return后的语句都不会执行&lt;/li&gt;
&lt;li&gt;如果return语句后不跟任何值相当于返回undefined&lt;/li&gt;
&lt;li&gt;return后可以跟任意数据类型&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="JavaScript学习之路" scheme="https://qaaa.top/categories/JavaScript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="JavaScript" scheme="https://qaaa.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>04 函数的参数</title>
    <link href="https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9504/"/>
    <id>https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9504/</id>
    <published>2021-08-05T14:13:30.079Z</published>
    <updated>2021-08-06T03:32:10.272Z</updated>
    
    <content type="html"><![CDATA[<h5>函数参数</h5><p>定义一个用来求两个数和的函数，可以在函数的（）中指定一个或多个形参</p><span id="more"></span><p><strong>多个形参之间用，隔开</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function sum(a,b)&#123;</span><br><span class="line">console.log(a+b);</span><br><span class="line">&#125;</span><br><span class="line">sum(1,2);</span><br></pre></td></tr></table></figure><ul><li>形参并不赋值</li><li>在调用函数时，在()中指定实参</li><li>实参将会赋值给函数中对应的形参</li><li>调用函数时解析器不会检查实参的类型，函数的实参可以时任意数据类型<ul><li>多余实参不会被赋值</li></ul></li><li>调用实参的数量少于形参的数量，则没有对应实参的形参将时undefined</li></ul>]]></content>
    
    
    <summary type="html">&lt;h5&gt;函数参数&lt;/h5&gt;

&lt;p&gt;定义一个用来求两个数和的函数，可以在函数的（）中指定一个或多个形参&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript学习之路" scheme="https://qaaa.top/categories/JavaScript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="JavaScript" scheme="https://qaaa.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>03 函数简介</title>
    <link href="https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9503/"/>
    <id>https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9503/</id>
    <published>2021-08-05T14:06:55.428Z</published>
    <updated>2021-08-06T03:34:32.848Z</updated>
    
    <content type="html"><![CDATA[<ul><li>对象也是一个对象</li><li>函数可以封装一些功能（代码），在需要时可以执行这些功能（代码）</li></ul><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">console.log(fun);</span><br><span class="line">console.log(fun);</span><br><span class="line">console.log(fun);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>函数中可以保存一些diamanté在需要的时候调用</li><li>使用typeof检查函数对象时，会返回function</li><li>函数中封装的代码回按照函数顺序执行</li></ul><h5>构造函数，将封装的代码以字符串的形式传递给构造函数</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var fun = new Function(”console.log(’Hello 这是我的第一个函数’);”);</span><br><span class="line">fun();   // 调用</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS：基本不会使用</span><br></pre></td></tr></table></figure><h5>使用函数声明来一个对象</h5>    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function fun2()&#123;</span><br><span class="line">console.log(”fun”);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5>使用函数表达式来创建一个函数（将一个匿名函数赋值给变量）</h5>    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var fun3 = function()&#123;</span><br><span class="line">console.log(”我是你命函数中封装的代码”)；</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;对象也是一个对象&lt;/li&gt;
&lt;li&gt;函数可以封装一些功能（代码），在需要时可以执行这些功能（代码）&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="JavaScript学习之路" scheme="https://qaaa.top/categories/JavaScript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="JavaScript" scheme="https://qaaa.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>02 对象字面量</title>
    <link href="https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9502/"/>
    <id>https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9502/</id>
    <published>2021-08-05T05:14:32.809Z</published>
    <updated>2021-08-06T03:35:47.621Z</updated>
    
    <content type="html"><![CDATA[<h5>使用对象字面量来创建一个对象：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;&#125;;</span><br><span class="line">等同于var obj = new</span><br></pre></td></tr></table></figure><span id="more"></span><h5>在创建对象时，可以直接指定对象中的属性</h5>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：&#123;属性名：属性值，属性名：属性值，，，&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">name:“猪八戒”,</span><br><span class="line">age:”28”,</span><br><span class="line">gender:”男”</span><br><span class="line">test:”&#123;name:”zhubajie”&#125;”</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h5&gt;使用对象字面量来创建一个对象：&lt;/h5&gt;

&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var obj = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;等同于var obj = new&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="JavaScript学习之路" scheme="https://qaaa.top/categories/JavaScript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="JavaScript" scheme="https://qaaa.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>01 基本数据类型和引用数据类型</title>
    <link href="https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9501/"/>
    <id>https://qaaa.top/2021/08/05/JavaScript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%9501/</id>
    <published>2021-08-05T03:42:26.311Z</published>
    <updated>2021-08-06T03:36:48.559Z</updated>
    
    <content type="html"><![CDATA[<ul><li>当比较两个基本数据类型时，就是比值  </li><li>当比较两个引用数据类型时，就是比较对象的内存地址  </li><li>如果两个对象时一模一样的，但是地址不同，也会返回false  </li></ul><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Console.log(obj3 == obj4);</span><br></pre></td></tr></table></figure><p>PS：对象是储存在堆内存中，基本数据类型储存在栈内存中</p>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;当比较两个基本数据类型时，就是比值  &lt;/li&gt;
&lt;li&gt;当比较两个引用数据类型时，就是比较对象的内存地址  &lt;/li&gt;
&lt;li&gt;如果两个对象时一模一样的，但是地址不同，也会返回false  &lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="JavaScript学习之路" scheme="https://qaaa.top/categories/JavaScript%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
    
    <category term="JavaScript" scheme="https://qaaa.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>小爱课程表适配</title>
    <link href="https://qaaa.top/2021/07/29/xiaoai/"/>
    <id>https://qaaa.top/2021/07/29/xiaoai/</id>
    <published>2021-07-29T13:58:35.959Z</published>
    <updated>2021-08-06T10:13:38.735Z</updated>
    
    <content type="html"><![CDATA[<h4 id="使用cheerio"><a href="#使用cheerio" class="headerlink" title="使用cheerio"></a>使用cheerio</h4><p>cheerio是jquery核心功能的一个快速灵活而又简洁的实现，主要是为了用在服务器端需要对DOM进行操作的地方，让你在服务器端和html愉快的玩耍</p><h4 id="快到没朋友"><a href="#快到没朋友" class="headerlink" title="快到没朋友"></a>快到没朋友</h4><p>cheerio使用了及其简洁而又标准的DOM模型， 因此对文档的转换，操作，渲染都极其的高效。基本的端到端测试显示它的速度至少是JSDOM的8倍</p><h4 id="provider函数对课程表进行解析"><a href="#provider函数对课程表进行解析" class="headerlink" title="provider函数对课程表进行解析"></a>provider函数对课程表进行解析</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function scheduleHtmlProvider(dom = document) &#123;</span><br><span class="line">var aaa = dom.querySelector(&#x27;#user&#x27;).outerHTML;</span><br><span class="line">return aaa;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;使用cheerio&quot;&gt;&lt;a href=&quot;#使用cheerio&quot; class=&quot;headerlink&quot; title=&quot;使用cheerio&quot;&gt;&lt;/a&gt;使用cheerio&lt;/h4&gt;&lt;p&gt;cheerio是jquery核心功能的一个快速灵活而又简洁的实现，主要是为了用在服务</summary>
      
    
    
    
    <category term="小爱课程表" scheme="https://qaaa.top/categories/%E5%B0%8F%E7%88%B1%E8%AF%BE%E7%A8%8B%E8%A1%A8/"/>
    
    
    <category term="JavaScript" scheme="https://qaaa.top/tags/JavaScript/"/>
    
    <category term="cheerio" scheme="https://qaaa.top/tags/cheerio/"/>
    
  </entry>
  
</feed>
